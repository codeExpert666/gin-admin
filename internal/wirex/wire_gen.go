// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

// wirex 包负责处理应用程序的依赖注入
package wirex

import (
	"context"
	"github.com/LyricTian/gin-admin/v10/internal/mods"
	"github.com/LyricTian/gin-admin/v10/internal/mods/rbac"
	"github.com/LyricTian/gin-admin/v10/internal/mods/rbac/api"
	"github.com/LyricTian/gin-admin/v10/internal/mods/rbac/biz"
	"github.com/LyricTian/gin-admin/v10/internal/mods/rbac/dal"
	"github.com/LyricTian/gin-admin/v10/pkg/util"
)

// BuildInjector 函数是整个应用的依赖注入构建器
// 它接收一个 context.Context 参数，返回一个注入器实例、清理函数和可能的错误
// 这个函数由 Wire 工具自动生成，用于构建整个应用的依赖关系图
func BuildInjector(ctx context.Context) (*Injector, func(), error) {
	// 初始化数据库连接
	db, cleanup, err := InitDB(ctx)
	if err != nil {
		return nil, nil, err
	}

	// 初始化缓存服务
	cacher, cleanup2, err := InitCacher(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}

	// 初始化认证服务
	auther, cleanup3, err := InitAuth(ctx)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}

	// 创建事务管理器
	trans := &util.Trans{
		DB: db,
	}

	// 以下是各个模块的数据访问层（DAL）初始化
	menu := &dal.Menu{
		DB: db,
	}
	menuResource := &dal.MenuResource{
		DB: db,
	}
	roleMenu := &dal.RoleMenu{
		DB: db,
	}

	// 初始化业务逻辑层（BIZ）组件
	bizMenu := &biz.Menu{
		Cache:           cacher,
		Trans:           trans,
		MenuDAL:         menu,
		MenuResourceDAL: menuResource,
		RoleMenuDAL:     roleMenu,
	}

	// 初始化 API 层组件
	apiMenu := &api.Menu{
		MenuBIZ: bizMenu,
	}

	// 初始化角色相关组件
	role := &dal.Role{
		DB: db,
	}
	userRole := &dal.UserRole{
		DB: db,
	}
	bizRole := &biz.Role{
		Cache:       cacher,
		Trans:       trans,
		RoleDAL:     role,
		RoleMenuDAL: roleMenu,
		UserRoleDAL: userRole,
	}
	apiRole := &api.Role{
		RoleBIZ: bizRole,
	}

	// 初始化用户相关组件
	user := &dal.User{
		DB: db,
	}
	bizUser := &biz.User{
		Cache:       cacher,
		Trans:       trans,
		UserDAL:     user,
		UserRoleDAL: userRole,
	}
	apiUser := &api.User{
		UserBIZ: bizUser,
	}

	// 初始化登录相关组件
	login := &biz.Login{
		Cache:       cacher,
		Auth:        auther,
		UserDAL:     user,
		UserRoleDAL: userRole,
		MenuDAL:     menu,
		UserBIZ:     bizUser,
	}
	apiLogin := &api.Login{
		LoginBIZ: login,
	}

	// 初始化日志相关组件
	logger := &dal.Logger{
		DB: db,
	}
	bizLogger := &biz.Logger{
		LoggerDAL: logger,
	}
	apiLogger := &api.Logger{
		LoggerBIZ: bizLogger,
	}

	// 初始化 RBAC（基于角色的访问控制）相关组件
	casbinx := &rbac.Casbinx{
		Cache:           cacher,
		MenuDAL:         menu,
		MenuResourceDAL: menuResource,
		RoleDAL:         role,
	}
	rbacRBAC := &rbac.RBAC{
		DB:        db,
		MenuAPI:   apiMenu,
		RoleAPI:   apiRole,
		UserAPI:   apiUser,
		LoginAPI:  apiLogin,
		LoggerAPI: apiLogger,
		Casbinx:   casbinx,
	}

	// 初始化模块管理器
	modsMods := &mods.Mods{
		RBAC: rbacRBAC,
	}

	// 创建最终的注入器实例
	injector := &Injector{
		DB:    db,
		Cache: cacher,
		Auth:  auther,
		M:     modsMods,
	}

	// 返回注入器实例和清理函数
	return injector, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
